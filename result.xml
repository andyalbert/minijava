<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<source>
  <tokens>
    <token type="CLASS">class</token>
    <token type="ID">Factorial</token>
    <token type="LEFT_CURLY_B">{</token>
    <token type="EOL"/>
    <token type="PUBLIC">public</token>
    <token type="STATIC">static</token>
    <token type="VOID">void</token>
    <token type="MAIN">main</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="STRING">String</token>
    <token type="LEFT_SQUARE_B">[</token>
    <token type="RIGHT_SQUARE_B">]</token>
    <token type="ID">a</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="LEFT_CURLY_B">{</token>
    <token type="EOL"/>
    <token type="SYSTEM.OUT.PRINTLN">System.out.println</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="NEW">new</token>
    <token type="ID">Fac</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="ERROR">.</token>
    <token type="ID">ComputeFac</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="INTEGRAL_LITERAL">10</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="SEMICOLON">;</token>
    <token type="EOL"/>
    <token type="RIGHT_CURLY_B">}</token>
    <token type="EOL"/>
    <token type="RIGHT_CURLY_B">}</token>
    <token type="EOL"/>
    <token type="CLASS">class</token>
    <token type="ID">Fac</token>
    <token type="LEFT_CURLY_B">{</token>
    <token type="EOL"/>
    <token type="PUBLIC">public</token>
    <token type="INT">int</token>
    <token type="ID">ComputeFac</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="INT">int</token>
    <token type="ID">num</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="LEFT_CURLY_B">{</token>
    <token type="EOL"/>
    <token type="INT">int</token>
    <token type="ID">num_aux</token>
    <token type="SEMICOLON">;</token>
    <token type="EOL"/>
    <token type="IF">if</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="ID">num</token>
    <token type="LESSTHAN">&lt;</token>
    <token type="INTEGRAL_LITERAL">1</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="EOL"/>
    <token type="ID">num_aux</token>
    <token type="EQUAL">=</token>
    <token type="INTEGRAL_LITERAL">1</token>
    <token type="SEMICOLON">;</token>
    <token type="EOL"/>
    <token type="ELSE">else</token>
    <token type="EOL"/>
    <token type="ID">num_aux</token>
    <token type="EQUAL">=</token>
    <token type="ID">num</token>
    <token type="MULTIPLY">*</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="THIS">this</token>
    <token type="DOT">.</token>
    <token type="ID">ComputeFac</token>
    <token type="LEFT_ROUND_B">(</token>
    <token type="ID">num</token>
    <token type="MINUS">-</token>
    <token type="INTEGRAL_LITERAL">1</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="RIGHT_ROUND_B">)</token>
    <token type="SEMICOLON">;</token>
    <token type="EOL"/>
    <token type="RETURN">return</token>
    <token type="ID">num_aux</token>
    <token type="SEMICOLON">;</token>
    <token type="EOL"/>
    <token type="RIGHT_CURLY_B">}</token>
    <token type="EOL"/>
    <token type="RIGHT_CURLY_B">}</token>
  </tokens>
</source>
