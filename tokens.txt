<CLASS>: class
<ID>: test
<LEFT_CURLY_B>: {
<EOL>: 
<PUBLIC>: public
<STATIC>: static
<VOID>: void
<MAIN>: main
<LEFT_ROUND_B>: (
<STRING>: String
<LEFT_SQUARE_B>: [
<RIGHT_SQUARE_B>: ]
<ID>: args
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<EOL>: 
<WHILE>: while
<LEFT_ROUND_B>: (
<TRUE>: true
<RIGHT_ROUND_B>: )
<EOL>: 
<SYSTEM.OUT.PRINTLN>: System.out.println
<ERROR>: (
<NOT>: !
<FALSE>: false
<RIGHT_ROUND_B>: )
<SEMICOLON>: ;
<EOL>: 
<RIGHT_CURLY_B>: }
<EOL>: 
<RIGHT_CURLY_B>: }
<EOL>: 
<EOL>: 
<CLASS>: class
<ID>: test2
<EXTENDS>: extends
<ID>: test
<LEFT_CURLY_B>: {
<EOL>: 
<INT>: int
<LEFT_SQUARE_B>: [
<RIGHT_SQUARE_B>: ]
<ID>: aab
<SEMICOLON>: ;
<EOL>: 
<FLOAT>: float
<ID>: x
<SEMICOLON>: ;
<EOL>: 
<EOL>: 
<PUBLIC>: public
<INT>: int
<ID>: getIt
<LEFT_ROUND_B>: (
<INT>: int
<ID>: a
<COMMA>: ,
<FLOAT>: float
<ID>: b
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<EOL>: 
<INT>: int
<ID>: z
<SEMICOLON>: ;
<EOL>: 
<EOL>: 
<ID>: mine
<EQUAL>: =
<NEW>: new
<ID>: test
<LEFT_ROUND_B>: (
<RIGHT_ROUND_B>: )
<SEMICOLON>: ;
<EOL>: 
<EOL>: 
<RETURN>: return
<THIS>: this
<SEMICOLON>: ;
<EOL>: 
<RIGHT_CURLY_B>: }
<EOL>: 
<RIGHT_CURLY_B>: }
